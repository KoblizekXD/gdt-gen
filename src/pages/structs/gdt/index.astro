---

---

<html>
  <head></head>
  <body class="gap-y-6 h-screen bg-[#1E1E2E] font-mono text-zinc-200 py-16 bg-gradient-to-b flex flex-col justify-center items-center">
    <h1 class="font-bold text-4xl">You asked for it.</h1>
    <pre class="w-1/2 py-2 px-8 border rounded border-zinc-600">
      #include &lt;stdint.h&gt;

      typedef struct _gdt_entry &#123;
          uint16_t limit_low;
          uint16_t base_low;
          uint8_t base_middle;
          uint8_t access;
          uint8_t granularity;
          uint8_t base_high;
          uint32_t base_upper;
          uint32_t reserved;
      &#125; __attribute__((packed)) gdt_entry_t;</pre>
      <h3 class="font-bold text-lime-500">## What's the deal with with __attribute__((packed))?</h3>
      <p class="w-1/3">
        Since you can't use Google, I'll tell you. The <code>__attribute__((packed))</code> directive tells the compiler to not add any padding to the struct. This is important because the GDT is a data structure that needs to be exactly 8 bytes long. If the compiler were to add padding, the GDT would be larger than 8 bytes and the CPU would not be able to read it correctly.
      </p>
      <h3 class="font-bold text-lime-500">## I don't use flat mode (64 bits), do I still need the reserved bytes?</h3>
      <p class="w-1/3">
        No, you don't. The reserved bytes are only needed in flat mode. If you're using protected mode(32 bits), you need to remove them.
      </p>
  </body>
</html>

<script>
  const keywords = ['uint8_t', 'uint16_t', 'uint32_t', 'uint64_t', 'gdt_entry_t', 'typedef', 'struct', '__attribute__', 'packed', '#include', 'stdint.h'];

  const codeBlock = document.querySelector('pre')!!;
  let original = codeBlock.innerHTML;
  keywords.forEach((keyword) => {
    const regex = new RegExp(`\\b(${keyword})\\b`, 'gi');
    original = original.replace(regex, `<span class="text-[#6DB2FA]">${keyword}</span>`);
  });
  codeBlock.innerHTML = original;
</script>